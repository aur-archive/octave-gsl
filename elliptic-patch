diff --git a/INDEX b/INDEX
index 542b535..defc704 100644
--- a/INDEX
+++ b/INDEX
@@ -52,6 +52,8 @@ Special functions
  debye_4
  ellint_Ecomp
  ellint_Kcomp
+ ellint_F
+ ellint_E
  erf_Q
  erf_Z
  erf_gsl
diff --git a/PKG_ADD b/PKG_ADD
index d11ee4a..af19737 100644
--- a/PKG_ADD
+++ b/PKG_ADD
@@ -45,6 +45,8 @@ autoload ("debye_3", fullfile (fileparts (mfilename ("fullpath")), "gsl_sf.oct")
 autoload ("debye_4", fullfile (fileparts (mfilename ("fullpath")), "gsl_sf.oct"));
 autoload ("ellint_Ecomp", fullfile (fileparts (mfilename ("fullpath")), "gsl_sf.oct"));
 autoload ("ellint_Kcomp", fullfile (fileparts (mfilename ("fullpath")), "gsl_sf.oct"));
+autoload ("ellint_F", fullfile (fileparts (mfilename ("fullpath")), "gsl_sf.oct"));
+autoload ("ellint_E", fullfile (fileparts (mfilename ("fullpath")), "gsl_sf.oct"));
 autoload ("erfc_gsl", fullfile (fileparts (mfilename ("fullpath")), "gsl_sf.oct"));
 autoload ("erf_gsl", fullfile (fileparts (mfilename ("fullpath")), "gsl_sf.oct"));
 autoload ("erf_Q", fullfile (fileparts (mfilename ("fullpath")), "gsl_sf.oct"));
diff --git a/src/README b/src/README
index e93b138..14506f1 100644
--- a/src/README
+++ b/src/README
@@ -43,6 +43,7 @@ As of this writing there are:
 	double fn(int,double)
 	double fn(int,int,double)
 	double fn(double,mode)
+	double fn(double,double,mode)
 
 mode is a precision mode accepting a gsl_mode_t value.
 
diff --git a/src/buildgsl_sf.sh b/src/buildgsl_sf.sh
index 5babc57..b6a93d9 100644
--- a/src/buildgsl_sf.sh
+++ b/src/buildgsl_sf.sh
@@ -1076,7 +1076,23 @@ parameter @math{m = k^2}.
 EOF
 ./replace_template.sh double_mode_to_double.cc.template >> gsl_sf.cc
 
+# double double mode to double
 
+export octave_name=ellint_F
+export    funcname=gsl_sf_ellint_F
+cat << \EOF > docstring.txt
+This routine computes the incomplete elliptic integral F(\phi,k) to
+the accuracy specified by the mode variable mode.
+EOF
+./replace_template.sh double_double_mode_to_double.cc.template >> gsl_sf.cc
+
+export octave_name=ellint_E
+export    funcname=gsl_sf_ellint_E
+cat << \EOF > docstring.txt
+This routine computes the incomplete elliptic integral E(\phi,k) to
+the accuracy specified by the mode variable mode.
+EOF
+./replace_template.sh double_double_mode_to_double.cc.template >> gsl_sf.cc
 
 # int to double
 
diff --git a/src/double_double_mode_to_double.cc.template b/src/double_double_mode_to_double.cc.template
new file mode 100644
index 0000000..e38a596
--- /dev/null
+++ b/src/double_double_mode_to_double.cc.template
@@ -0,0 +1,147 @@
+DEFUN_DLD(GSL_OCTAVE_NAME, args, nargout, "\
+  -*- texinfo -*-\n\
+@deftypefn {Loadable Function} {@var{z} =} GSL_OCTAVE_NAME (@var{x}, @var{y}, @var{mode})\n\
+@deftypefnx {Loadable Function} {[@var{z}, @var{err}] =} GSL_OCTAVE_NAME (@dots{})\n\
+\n\
+GSL_FUNC_DOCSTRING
+\n\
+The third argument @var{mode} must be an integer corresponding to\n\
+\n\
+@table @asis\n\
+@item 0 = GSL_PREC_DOUBLE\n\
+    Double-precision, a relative accuracy of approximately @code{2 * 10^-16}.\n\
+@item 1 = GSL_PREC_SINGLE\n\
+    Single-precision, a relative accuracy of approximately @code{10^-7}.\n\
+@item 2 = GSL_PREC_APPROX\n\
+    Approximate values, a relative accuracy of approximately @code{5 * 10^-4}.\n\
+@end table\n\
+\n\
+@var{err} contains an estimate of the absolute error in the value @var{y}.\n\
+\n\
+This function is from the GNU Scientific Library,\n\
+see @url{http://www.gnu.org/software/gsl/} for documentation.\n\
+@end deftypefn\n\
+")
+{
+  int i;
+  dim_vector dv;
+
+  gsl_set_error_handler (octave_gsl_errorhandler);
+
+  if(!(args.length() == 3 || args.length() == 2)) {
+    print_usage ();
+    return octave_value();
+  }
+  if(!args(0).is_real_type() || !args(1).is_real_type() || (args.length() == 3 && !args(2).is_real_type())) {
+    error("The arguments must be real.");
+    print_usage ();
+    return octave_value();
+  }
+  if(args.length() == 3 && !args(2).is_scalar_type()) {
+    error("The mode must be scalar.");
+    print_usage ();
+    return octave_value();
+  }
+
+  int mode = args.length() == 3 ? static_cast<int>((args(2).array_value())(0)) : 0;
+  if(mode < 0)
+    mode = 0;
+  else if(mode > 2)
+    mode = 2;
+
+  // Nice combinatorial explosion here
+  NDArray n = args(0).array_value();
+  NDArray x = args(1).array_value();
+  if(n.length() == x.length()) {
+    dv = x.dims();
+    NDArray y(dv);
+    int len = x.length();
+    if(nargout < 2) {
+      for(i = 0; i < len; i++) {
+        y.xelem(i) = GSL_FUNC_NAME (n.xelem(i),
+                                    x.xelem(i),
+                                    mode);
+      }
+      return octave_value(y);
+    } else {
+      NDArray err(dv);
+      gsl_sf_result result;
+      octave_value_list retval;
+      for(i = 0; i < len; i++) {
+        GSL_FUNC_NAME_e (n.xelem(i),
+                         x.xelem(i),
+                         mode,
+                         &result);
+        y.xelem(i) = result.val;
+        err.xelem(i) = result.err;
+      }
+      retval(1) = octave_value(err);
+      retval(0) = octave_value(y);
+      return retval;
+    }
+  } else if(n.length() == 1) {
+    dv = x.dims();
+    NDArray y(dv);
+    int len = x.length();
+    double ndouble = n.xelem(0);
+    if(nargout < 2) {
+      for(i = 0; i < len; i++) {
+        y.xelem(i) = GSL_FUNC_NAME (ndouble,
+                                    x.xelem(i),
+                                    mode);
+      }
+      return octave_value(y);
+    } else {
+      NDArray err(dv);
+      gsl_sf_result result;
+      octave_value_list retval;
+      for(i = 0; i < len; i++) {
+        GSL_FUNC_NAME_e (ndouble, x.xelem(i), mode, &result);
+        y.xelem(i) = result.val;
+        err.xelem(i) = result.err;
+      }
+      retval(1) = octave_value(err);
+      retval(0) = octave_value(y);
+      return retval;
+    }
+  } else if(x.length() == 1) {
+    dv = n.dims();
+    NDArray y(dv);
+    int len = n.length();
+    double xdouble = x.xelem(0);
+    if(nargout < 2) {
+      for(i = 0; i < len; i++) {
+        y.xelem(i) = GSL_FUNC_NAME (n.xelem(i),
+                                    xdouble,
+                                    mode);
+      }
+      return octave_value(y);
+    } else {
+      NDArray err(dv);
+      gsl_sf_result result;
+      octave_value_list retval;
+      for(i = 0; i < len; i++) {
+        GSL_FUNC_NAME_e (n.xelem(i),
+                         xdouble,
+                         mode,
+                         &result);
+        y.xelem(i) = result.val;
+        err.xelem(i) = result.err;
+      }
+      retval(1) = octave_value(err);
+      retval(0) = octave_value(y);
+      return retval;
+    }
+  } else {
+    error("First and second argument must either have the same size, or one of them must be scalar.");
+    print_usage ();
+  }
+
+  return octave_value();
+}
+
+/*
+  ;;; Local Variables: ***
+  ;;; mode: C++ ***
+  ;;; End: ***
+*/
